name: "Test"
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: "Install Deps"
        run: npm install
      - name: "Test"
        run: npx vitest --coverage.enabled true

      - name: "Upload Coverage"
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  report:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Downlod Artifacts
        uses: actions/download-artifact@v4

      - name: List Files
        run: ls -R

  comment:
    needs: report
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: PR title
        run: echo "${{ github.event.pull_request.title }}"

      - name: Report Coverage
        shell: bash
        run: |
          value=`cat ./coverage/coverage-summary.json`
          echo The result is $value

      - name: Read Coverage Report
        id: read-report
        run: |
          summaryContent=$(cat ./coverage/coverage-summary.json)
          # the following lines are only required for multi line json
          summaryContent="${summaryContent//'%'/'%25'}"
          summaryContent="${summaryContent//$'\n'/'%0A'}"
          summaryContent="${summaryContent//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=summaryContent::$summaryContent"

      - name: Create PR Comment
        id: create-comment
        uses: actions/github-script@v5
        with:
          script: |
            const markdownContent = JSON.parse(JSON.stringify(${{ steps.read-report.outputs.summaryContent }}))

            let markdown = '# Code Coverage Report\n\n';
            
            markdown += '| File  | Statements | Branches | Functions | Lines |';
            markdown += '\n';
            markdown += '| :---: | :--------: | :------: | :-------: | :---: |';
            markdown += '\n';

            Object.keys(markdownContent).forEach((filePath) => {
                const fileCoverage = markdownContent[filePath];

                const fileName = filePath.split("/").pop();
                markdown += `| ${fileName}`;

                const statementsParameters = fileCoverage["statements"];
                if(typeof statementsParameters === "object") {
                  markdown += ` | ${statementsParameters.covered} / ${statementsParameters.total - statementsParameters.skipped}, **${statementsParameters.pct}%** | `;
                }

                const branchesParameters = fileCoverage["branches"];
                if(typeof branchesParameters === "object") {
                  markdown += ` | ${branchesParameters.covered} / ${branchesParameters.total - branchesParameters.skipped}, **${branchesParameters.pct}%** | `;
                }

                const functionsParameters = fileCoverage["functions"];
                if(typeof functionsParameters === "object") {
                  markdown += ` | ${functionsParameters.covered} / ${functionsParameters.total - functionsParameters.skipped}, **${functionsParameters.pct}%** | `;
                }

                const linesParameters = fileCoverage["lines"];
                if(typeof linesParameters === "object") {
                  markdown += ` | ${linesParameters.covered} / ${linesParameters.total - linesParameters.skipped}, **${linesParameters.pct}%** | `;
                }

                markdown += '\n';
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: markdown
            })