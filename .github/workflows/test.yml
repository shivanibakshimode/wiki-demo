name: "Test Workflow"
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Install Deps
        run: npm install
      - name: Test
        run: npx vitest --coverage.enabled true
      - name: Upload Latest Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-latest
          path: coverage
      
  read-previous:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      previousSummaryContent: ${{ steps.read-previous-report.outputs.previousSummaryContent }}
    steps:
      # - name: Download Previous Artifacts
      #   uses: actions/github-script@v6
      #   env:
      #     WORKFLOW_FILENAME: test.yml
      #     ARTIFACT_NAME: coverage-previous
      #     ARTIFACT_FILENAME: coverage-previous.zip
      #     UNZIP_DIRECTORY: ./coverage-previous
      #   with:
      #     script: |
      #       const { downloadPreviousArtifact } = await import('${{ github.workspace }}/scripts/download-previous-artifact.js')
      #       await downloadPreviousArtifact({github, context})
      - name: Read Previous Coverage Report
        id: read-previous-report
        run: |
          if [ -f "./coverage-previous/coverage-summary.json" ]; then
            echo "yes"
            previousSummaryContent=$(cat ./coverage-previous/coverage-summary.json)
            # the following lines are only required for multi line json
            previousSummaryContent="${previousSummaryContent//'%'/'%25'}"
            previousSummaryContent="${previousSummaryContent//$'\n'/'%0A'}"
            previousSummaryContent="${previousSummaryContent//$'\r'/'%0D'}"
            # end of optional handling for multi line json
          else 
            echo "No previous coverage report found"
          fi
          $previousSummaryContent="false"
          echo "Yessss contentt: $previousSummaryContent"
          echo "Yessss contentt: $previousSummaryContent == null"
          echo "::set-output name=previousSummaryContent::$previousSummaryContent"

  read-latest:
    needs: [test, read-previous]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      latestSummaryContent: ${{ steps.read-latest-report.outputs.latestSummaryContent }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Latest Artifacts
        uses: actions/download-artifact@v4
      - name: Read Latest Coverage Report
        id: read-latest-report
        run: |
          latestSummaryContent=$(cat ./coverage-latest/coverage-summary.json)
          # the following lines are only required for multi line json
          latestSummaryContent="${latestSummaryContent//'%'/'%25'}"
          latestSummaryContent="${latestSummaryContent//$'\n'/'%0A'}"
          latestSummaryContent="${latestSummaryContent//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=latestSummaryContent::$latestSummaryContent"
      - name: Rename latest report
        run: mv coverage-latest coverage-previous
      - name: Upload Previous Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-previous
          path: coverage

  comment:
    needs: [test, read-previous, read-latest]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create PR Comment
        id: create-comment
        uses: actions/github-script@v6
        with:
          script: |
            const latestMarkdownContent = JSON.parse(JSON.stringify(${{ needs.read-latest.outputs.latestSummaryContent }}));
            console.log("hereeeee");
            let previousMarkdownContent = {};
            console.log("condition 2: ", ${{ needs.read-previous.outputs.previousSummaryContent }} == "false")
            console.log("condition 1: ", ${{ needs.read-previous.outputs.previousSummaryContent }} == "false")
            console.log("conditin: ", ${{ needs.read-previous.outputs.previousSummaryContent }} != "false")
            if(${{ needs.read-previous.outputs.previousSummaryContent }} != "false") {
              previousMarkdownContent = JSON.parse(JSON.stringify(${{ needs.read-previous.outputs.previousSummaryContent }}))
            }

            console.log("previousMarkdownContent in scripttt: ", previousMarkdownContent);
            const { createComment } = await import('${{ github.workspace }}/scripts/create-comment.js');
            await createComment({github, context, latestMarkdownContent, previousMarkdownContent});
