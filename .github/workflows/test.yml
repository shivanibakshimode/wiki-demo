name: "Test"
on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: "Install Deps"
        run: npm install
      - name: "Test"
        run: npx vitest --coverage.enabled true

      - name: "Upload Coverage"
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  report:
    needs: test
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Downlod Artifacts 
        uses: actions/download-artifact@v4
      
      - name: List Files
        run: ls -R

  comment:
    needs: report
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: PR title
        run: echo "${{ github.event.pull_request.title }}"

      - name: Report Coverage
        shell: bash
        run: |
          value=`cat ./coverage/coverage-summary.json`
          echo The result is $value

      - name: Read Coverage Report
        id: read-report
        run: |
          summaryContent=$(cat ./coverage/coverage-summary.json)
          echo "::set-output name=summaryContent::$summaryContent"

      - name: Convert JSON to Markdown
        id: convert-to-md
        run: |
          summaryContent="${{ steps.read-report.outputs.summaryContent }}"
          // Parse the JSON content
          const summaryData = JSON.parse(`${summaryContent}`);

          // Define a function to convert JSON data to Markdown
          function jsonToMarkdown(data) {
            let markdown = '';

            for (const key in data) {
              markdown += `### ${key}\n\n`;

              if (typeof data[key] === 'object') {
                markdown += jsonToMarkdown(data[key]);
              } else {
                markdown += `${key}: ${data[key]}\n\n`;
              }
            }

            return markdown;
          }

          // Convert JSON data to Markdown
          const markdownContent = jsonToMarkdown(summaryData);

          // Set the Markdown content as output
          echo "::set-output name=markdownContent::$markdownContent"

      - name: Create PR Comment
        id: create-comment
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the coverage report content from the previous step's output
            const markdownContent = '${{ steps.convert-to-md.outputs.markdownContent }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: markdownContent
            })

      # - name: Generate Coverage Report
      #   run: node scripts/parse-coverage.js

      # - name: Add comment to PR
      #   id: create-comment
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       let markdown = '# Istanbul Coverage Report\n\n';
      #       // Loop through each file in the coverage data
      #       Object.keys(coverageData).forEach(filePath => {
      #           const fileCoverage = coverageData[filePath];
      #           markdown += `## ${filePath}\n\n`;

      #           // Loop through each line in the file
      #           fileCoverage.forEach((lineCoverage, lineNumber) => {
      #               const line = lineNumber + 1;
      #               const coveragePercentage = lineCoverage === 0 ? '0%' : '100%';
      #               const status = lineCoverage === 0 ? 'Not covered' : 'Covered';

      #               markdown += `| Line ${line} | ${status} | ${coveragePercentage} |\n`;
      #           });

      #           markdown += '\n';
      #       });
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: markdown
      #       })